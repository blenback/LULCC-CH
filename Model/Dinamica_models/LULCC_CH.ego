@charset = UTF-8
@date = 2023-Jul-20 18:14:37
@version = 7.2.0.20221230
@submodel.import = CreateCubeOfProbabilityMaps { { \"transitionMatrix\" : Table, \"inputFolder\" : Folder } { } { \"probabilityMapsRasterCube\" : Map } }; AllocateTransitions { { \"lanscape\" : CategoricalMap, \"probabilities\" : Map, \"transitionMatrix\" : TransitionMatrix, \"percentOfTransitionsByExpansion\" : PercentMatrix, \"patchExpansionParameters\" : TransitionFunctionParameterMatrix, \"patchGenerationParameters\" : TransitionFunctionParameterMatrix } { \"printTransitionInfo\" : BooleanValue } { \"resultingLanscape\" : CategoricalMap } }; CalcSimilarityOfDifferences { { \"initialMap\" : CategoricalMap, \"observedMap\" : CategoricalMap, \"simulatedMap\" : CategoricalMap } { \"useExponentialDecay\" : BooleanValue, \"windowSize\" : PositiveIntegerValue, \"printSimilarities\" : BooleanValue, \"exponentialDecayDivisor\" : RealValue } { \"similarityMap\" : Map, \"similarity\" : RealValue } }
Script {{
    @collapsed = no
    @alias = Simulation control
    _ := Group .none {{
        @alias = Specify control table file path: Table consisting of columns specifying the simulations to be performed (e.g. scenarios, length, versions etc.)
        specifyControlTableFilePathTableConsistingOfColumnsSpecifyingTheSimulationsToBePerformedEGScenariosLengthVersionsEtc := String $"(=====TABLE_PATH=====)";

        @collapsed = no
        @alias = Subset control table to only simulations yet to be completed (i.e. modelled)
        subsetControlTableToOnlySimulationsYetToBeCompletedIEModelled := CalculateRExpression "IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyMgRGluYW1pY2Ffc3Vic2V0X2NvbnRyb2xfdGFibGU6IFN1YnNldCB0aGUgY29udHJvbCB0YWJsZSB0byByZW1vdmUgc2ltdWxhdGlvbnMKIyMgdGhhdCBoYXZlIGFscmVhZHkgYmVlbiBjb21wbGV0ZWQKIyMgRGF0ZTogMDEtMTAtMjAyMgojIyBBdXRob3I6IEJlbiBCbGFjawojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKI3JlY2VpdmUgY29udHJvbCB0YWJsZSAKQ29udHJvbF90YWJsZSA8LSByZWFkLmNzdihzMSkKCiNzdWJzZXQgdG8gbm9uLWNvbXBsZXRlZCBzaW11bGF0aW9ucwpDb250cm9sX3RhYmxlIDwtIENvbnRyb2xfdGFibGVbQ29udHJvbF90YWJsZSRDb21wbGV0ZWQuc3RyaW5nID09ICJOIixdCgojU2VuZCBiYWNrIHN1YnNldHRlZCB0YWJsZQpvdXRwdXRUYWJsZSgiUmVtYWluaW5nX3NpbXVsYXRpb25zIiAsQ29udHJvbF90YWJsZSk=" .no {{
            NumberString specifyControlTableFilePathTableConsistingOfColumnsSpecifyingTheSimulationsToBePerformedEGScenariosLengthVersionsEtc 1;
        }};

        specifyWorkingDirectoryFromR := String $"(=====WORK_DIR=====)";

        @viewer.table = yes
        subsettedControlTable := ExtractStructTable subsetControlTableToOnlySimulationsYetToBeCompletedIEModelled $"(Remaining_simulations)";
    }};

    //
    // ===
    // Iterate over each row of the simulation control table performing the specifcied 
    // simulation 
    @collapsed = no
    @alias = Simulation iteration
    _ := ForEach subsettedControlTable subsettedControlTable {{
        step = step;

        @viewer.step = yes
        simulationNumber := Step step;

        @collapsed = no
        @alias = Set working directory
        Workdir specifyWorkingDirectoryFromR {{
            workdir = workdir;

            @collapsed = no
            @viewer.executionCompletedSucessfully = yes
            skipOnError1399 := SkipOnError .yes {{
                @collapsed = no
                @alias = Initialise scenario
                _ := Group .none {{
                    // Prepare maps, create folders and pass back file paths for current simulation 
                    @collapsed = no
                    @viewer.result = yes
                    initializeCurrentSimulation := CalculateRExpression "" .no {{
                        @alias = File path of control table
                        NumberString specifyControlTableFilePathTableConsistingOfColumnsSpecifyingTheSimulationsToBePerformedEGScenariosLengthVersionsEtc 1;

                        @alias = Working directory
                        NumberString specifyWorkingDirectoryFromR 2;

                        @alias = Row of current simulation in table
                        NumberValue simulationNumber 1;
                    }};

                    @viewer.lookupTable = yes
                    receiveTableOfTimeStepsDefiningLengthOfSimulation := ExtractStructLookupTable initializeCurrentSimulation $"(simulation_time_steps)";

                    @viewer.string = yes
                    receiveInitialLulcFilePath := ExtractStructString initializeCurrentSimulation $"(initial_lulc_path)";

                    @viewer.string = yes
                    receiveFolderPathForTablesOfAllocationAlgorithmParameters := ExtractStructString initializeCurrentSimulation $"(Allocation_params_folder_path)";

                    stepLength := ExtractStructNumber initializeCurrentSimulation $"(Step_length)";

                    @viewer.string = yes
                    receiveFilePathForSimulatedLulcMaps := ExtractStructString initializeCurrentSimulation $"(sim_lulc_folder_path)";

                    receiveSimulationId := ExtractStructString initializeCurrentSimulation $"(Sim_id)";

                    receiveModelMode := ExtractStructString initializeCurrentSimulation $"(Model_mode)";
                }};

                @collapsed = no
                scenarioTimeStepIteration := ForEach receiveTableOfTimeStepsDefiningLengthOfSimulation receiveTableOfTimeStepsDefiningLengthOfSimulation {{
                    step0 = step;

                    // Receives current model time step 
                    @viewer.step = yes
                    timeStep := Step step0;

                    @alias = Transition rate table control
                    _ := Group .none {{
                        @collapsed = no
                        loadTransitionRateTable := CalculateRExpression "IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyMgRGluYW1pY2FfbG9hZF90cmFuc19tYXRyaXg6IExvYWQgU2NlbmFyaW8vdGltZSBzcGVjaWZpYyB0cmFuc2l0aW9uIG1hdHJpeCAKIyMgYW5kIHVwZGF0ZSB0byByZWZsZWN0IGFueSBkZXRlcm1pbmlzdGljIHRyYW5zaXRpb25zCiMjIERhdGU6IDAzLTA1LTIwMjMKIyMgQXV0aG9yOiBCZW4gQmxhY2sKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKCiMjIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMjIyBBLSBQcmVwYXJhdGlvbgojIyMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKI3JlY2VpdmUgd29ya2luZyBkaXJlY3RvcnkKd3BhdGggPC0gczEKI3dwYXRoIDwtIGdldHdkKCkKc2V0d2Qod3BhdGgpCgojVmVjdG9yIHBhY2thZ2VzIGZvciBsb2FkaW5nCnBhY2tzPC1jKCJkYXRhLnRhYmxlIiwgInJhc3RlciIsICJ0aWR5dmVyc2UiLCJzdHJpbmdyIiwgInJlYWRyIiwgInhsc3giLAogICAgICAgICAiRGluYW1pY2EiLCAicmVhZHhsIikKCm5ldy5wYWNrczwtcGFja3NbIShwYWNrcyAlaW4lIGluc3RhbGxlZC5wYWNrYWdlcygpWywiUGFja2FnZSJdKV0KaWYobGVuZ3RoKG5ldy5wYWNrcykpIGluc3RhbGwucGFja2FnZXMobmV3LnBhY2tzKQoKIyBMb2FkIHJlcXVpcmVkIHBhY2thZ2VzCmludmlzaWJsZShsYXBwbHkocGFja3MsIHJlcXVpcmUsIGNoYXJhY3Rlci5vbmx5ID0gVFJVRSkpCgojc2VuZCBtb2RlbCB0b29sIHZhcnMgdG8gZ2xvYmFsIGVudmlyb25tZW50Cmxpc3QyZW52KHJlYWRSRFMoIlRvb2xzL01vZGVsX3Rvb2xfdmFycy5yZHMiKSwgLkdsb2JhbEVudikKCiMjIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMjIyBCLSBSZWNlaXZlIGluZm9ybWF0aW9uIGZyb20gRGluYW1pY2EKIyMjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCiN2YWx1ZXMgZm9yIHRlc3RpbmcgcHVycG9zZXMKIyBTaW11bGF0aW9uX3llYXIgPC0gIjIwMjUiCiMgU2ltdWxhdGlvbl9udW0gPC0gIjEiCgojUmVjZWl2ZSBjdXJyZW50IHNpbXVsYXRpb24gdGltZQpTaW11bGF0aW9uX3llYXIgPC0gdjEKCiNzaW11bGF0aW9uIG51bWJlciBiZWluZyBwZXJmb3JtZWQKU2ltdWxhdGlvbl9udW0gPC0gdjIKCiNsb2FkIHRhYmxlIG9mIHNpbXVsYXRpb25zCkNvbnRyb2xfdGFibGVfcGF0aCA8LSBzMgpTaW11bGF0aW9uX3RhYmxlIDwtIHJlYWQuY3N2KENvbnRyb2xfdGFibGVfcGF0aClbU2ltdWxhdGlvbl9udW0sXQoKI1ZlY3RvciBuYW1lIG9mIFNjZW5hcmlvIHRvIGJlIHRlc3RlZCBhcyBzdHJpbmcgb3IgbnVtZXJpYyAoaS5lLiAiQkFVIiBldGMuKSAKU2NlbmFyaW9fSUQgPC0gU2ltdWxhdGlvbl90YWJsZSRTY2VuYXJpb19JRC5zdHJpbmcKCiNWZWN0b3IgSUQgZm9yIHRoaXMgcnVuIG9mIHRoZSBzY2VuYXJpbyAoZS5nIFYxKQpTaW11bGF0aW9uX0lEIDwtIFNpbXVsYXRpb25fdGFibGUkU2ltdWxhdGlvbl9JRC5zdHJpbmcKCiNEZWZpbmUgbW9kZWxfbW9kZTogQ2FsaWJyYXRpb24gb3IgU2ltdWxhdGlvbgpNb2RlbF9tb2RlIDwtIFNpbXVsYXRpb25fdGFibGUkTW9kZWxfbW9kZS5zdHJpbmcKCiMjIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMjIyBCLSBMb2FkIFRyYW5zaXRpb24gcmF0ZSB0YWJsZSBhbmQgCiMjIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CgojdXNlIHNjZW5hcmlvIElEIHRvIGdyYWIgZm9sZGVyIHBhdGggb2Ygc2NlbmFyaW8gc3BlY2lmaWMgdHJhbnNpdGlvbiB0YWJsZXMKU2NlbmFyaW9fdHJhbnNfdGFibGVfZGlyIDwtIHN0cl9yZXBsYWNlKChsaXN0LmZpbGVzKFRyYW5zX3JhdGVfdGFibGVfZGlyLCBwYXR0ZXJuID0gU2NlbmFyaW9fSUQsIGZ1bGwubmFtZXMgPSBUUlVFKSksIHBhc3RlMCh3cGF0aCwgIi8iKSwgIiIpCgojVXNlIGZvbGRlciBwYXRoIHRvIGNyZWF0ZSBhIGdlbmVyaWMgc2NlbmFyaW8gc3BlY2lmaWMgdHJhbnNpdGlvbiBtYXRyaXggZmlsZSBwYXRoClNjZW5hcmlvX3RyYW5zX3RhYmxlX2ZpbGUgPC0gcGFzdGUwKFNjZW5hcmlvX3RyYW5zX3RhYmxlX2RpciwgIi8iLCBTY2VuYXJpb19JRCwgIl8iLCAidHJhbnNfdGFibGUiLCAiXyIsIFNpbXVsYXRpb25feWVhciwgIi5jc3YiKQoKI2xvYWQgdGhlIHRhYmxlClRyYW5zX3RhYmxlIDwtIHJlYWRfY3N2KFNjZW5hcmlvX3RyYW5zX3RhYmxlX2ZpbGUpCgojaWYgc3RhdGVtZW50IHRvIHJlbW92ZSB0cmFuc2l0aW9ucyBpZiB0aGV5IGFyZSBiZWluZyBpbXBsZW1lbnRlZCBkZXRlcm1pbmlzdGljbHkKaWYoZ3JlcGwoInNpbXVsYXRpb24iLCBNb2RlbF9tb2RlLCBpZ25vcmUuY2FzZSA9IFRSVUUpICYKICAgIGdyZXBsKCJZIiwgU2ltdWxhdGlvbl90YWJsZSREZXRlcm1pbmlzdGljX3RyYW5zLnN0cmluZywgaWdub3JlLmNhc2UgPSBUUlVFKSl7CgogICNyZW1vdmUgdHJhbnNpdGlvbnMgd2l0aCBpbml0aWFsIGNsYXNzID09IGdsYWNpZXIKICBUcmFuc190YWJsZSA8LSBUcmFuc190YWJsZVtUcmFuc190YWJsZSRgRnJvbSpgICE9IDE5LF0KCn0gI2Nsb3NlIGlmIHN0YXRlbWVudAoKI091dHB1dCB0YWJsZSB0byBEaW5hbWljYQpvdXRwdXRUYWJsZSgiVHJhbnNfcmF0ZV90YWJsZSIsIFRyYW5zX3RhYmxlKQ==" .no {{
                            @alias = Working directory
                            NumberString specifyWorkingDirectoryFromR 1;

                            @alias = File path of control table
                            NumberString specifyControlTableFilePathTableConsistingOfColumnsSpecifyingTheSimulationsToBePerformedEGScenariosLengthVersionsEtc 2;

                            @alias = Time step
                            NumberValue timeStep 1;

                            @alias = Simulation number
                            NumberValue simulationNumber 2;
                        }};

                        transitionRatesTable := ExtractStructTable loadTransitionRateTable $"(Trans_rate_table)";
                    }};

                    @viewer.map = yes
                    loadInitialLulcMap := LoadCategoricalMap {
                        filename = receiveInitialLulcFilePath,
                        nullValue = .none,
                        storageMode = .default,
                        suffixDigits = 0,
                        step = step0,
                        workdir = workdir
                    };

                    // simulated LULC map updated for each time step 
                    @viewer.map = yes
                    updatedLulcMap := MuxCategoricalMap loadInitialLulcMap loadUpdatedLulcMap;

                    @alias = Load allocation parameters
                    _ := Group .none {{
                        @collapsed = no
                        @viewer.result = yes
                        modifyFilePathForAllocationParametersTableForTimeStep := CreateString receiveFolderPathForTablesOfAllocationAlgorithmParameters {{
                            @alias = Time step
                            NumberValue timeStep 1;
                        }};

                        @viewer.table = yes
                        loadTableOfAllocationParameters := LoadTable {
                            filename = modifyFilePathForAllocationParametersTableForTimeStep,
                            uniqueIdKeyColumnCreation = .ifNecessary,
                            suffixDigits = 0,
                            step = step0,
                            workdir = workdir
                        };

                        @collapsed = no
                        @viewer.result = yes
                        splitParamTable := CalculateRExpression "I1JlY2VpdmUgcGFyYW1ldGVyIHRhYmxlClBhcmFtX3RhYmxlIDwtIHQxCgojc3Vic2V0IHRvIGNvbHVtbnMgcmVxdWlyZWQgZm9yICVleHBhbmRlciBpbnB1dApFeHBhbmRlcl90YWJsZSA8LSBQYXJhbV90YWJsZVssIGMoIkZyb20iLCAiVG8iLCAiUGVyY19leHBhbmRlciIpXQoKI3N1YnNldCB0byBjb2x1bW5zIHJlcXVpcmVkIGZvciBwYXRjaCBnZW5lcmF0aW9uIGlucHV0ClBhdGNoX3RhYmxlIDwtIFBhcmFtX3RhYmxlWywhKGNvbG5hbWVzKFBhcmFtX3RhYmxlKSAlaW4lIGMoIlBlcmNfZXhwYW5kZXIiLCAiUGVyY19wYXRjaGVyIikpXQoKI091dHB1dCAlIEV4cGFuc2lvbiB0YWJsZQojKE5vdGUgdGhlICcsMicgcGFyYW1ldGVyIGlzIG5lY2Vzc2FyeSBmb3IgRGluYW1pY2EgdG8gcmVnaXN0ZXIgdGhhdCB0aGUgdGFibGUgaGFzIDIga2V5IGNvbHVtbnMgKEZyb20gYW5kIFRvKSkKb3V0cHV0VGFibGUoIkV4cGFuZGVyX3RhYmxlIiwgRXhwYW5kZXJfdGFibGUsIDIpCm91dHB1dFRhYmxlKCJQYXRjaF90YWJsZSIsIFBhdGNoX3RhYmxlLCAyKQo=" .no {{
                            NumberTable loadTableOfAllocationParameters 1;
                        }};

                        @viewer.table = yes
                        patchRelatedParams := ExtractStructTable splitParamTable $"(Patch_table)";

                        @alias = % expansion table
                        @viewer.table = yes
                        expansionTable := ExtractStructTable splitParamTable $"(Expander_table)";
                    }};

                    @collapsed = no
                    @alias = Transition potential calculation
                    _ := Group .none {{
                        @collapsed = no
                        @alias = Transition potential R script
                        transitionPotentialRScript := CalculateRExpression "" .no {{
                            @alias = Control table path
                            NumberString specifyControlTableFilePathTableConsistingOfColumnsSpecifyingTheSimulationsToBePerformedEGScenariosLengthVersionsEtc 1;

                            @alias = File path for simulated LULC maps
                            NumberString receiveFilePathForSimulatedLulcMaps 2;

                            @alias = Working directory
                            NumberString specifyWorkingDirectoryFromR 3;

                            @alias = Time_step
                            NumberValue timeStep 1;

                            //
                            // ===
                            // Row of current simulation in table 
                            @alias = Current simulation number
                            NumberValue simulationNumber 2;
                        }};

                        @viewer.string = yes
                        folderPathForProbabilityMaps := ExtractStructString transitionPotentialRScript $"(probmap_folder_path)";

                        @viewer.probabilityMapsRasterCube = yes
                        createCubeOfProbabilityMaps2989 := CreateCubeOfProbabilityMaps transitionRatesTable folderPathForProbabilityMaps;
                    }};

                    @alias = Transition allocation
                    _ := Group .none {{
                        @collapsed = no
                        createSimulatedLulcSavePath := CalculateRExpression "IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyMgRGluYW1pY2FfbW9kaWZ5X2x1bGNfc2F2ZV9wYXRoOiBGaW5hbGl6ZSBzYXZlIHBhdGggZm9yIHNpbXVsYXRlZCBMVUxDIG1hcAojIyBhY2NvcmRpbmcgdG8gdGltZSBzdGVwCiMjIERhdGU6IDEwLTEwLTIwMjIKIyMgQXV0aG9yOiBCZW4gQmxhY2sKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKCiNyZWNlaXZlIGJhc2ljIHBhdGggZnJvbSBEaW5hbWljYSAocHJvZHVjZWQgYnkgc2NyaXB0IERpbmFtaWNhX2luaXRpYWxpemUpCkxVTENfYmFzZV9wYXRoIDwtIHMxCgojcmVjZWl2ZSB0aW1lIHN0ZXAKVGltZV9zdGVwIDwtIHYxClN0ZXBfbGVuZ3RoIDwtIHYyIAoKI2FkZCBzdGVwIGxlbmd0aCB0byBjdXJyZW50IHRpbWUgc3RlcCB0byBnZXQgc2ltdWxhdGlvbiB5ZWFyClNpbXVsYXRlZF9sdWxjX3llYXIgPC0gIHBhc3RlKChUaW1lX3N0ZXAgKyBTdGVwX2xlbmd0aCkpCgojcGFzdGUgdG9nZXRoZXIgYW5kIGluY2x1ZGUgJy50aWYnIGFzIHRoZSBmaWxlIHR5cGUKRmluYWxfbFVMQ19wYXRoIDwtIHBhc3RlMChMVUxDX2Jhc2VfcGF0aCwgU2ltdWxhdGVkX2x1bGNfeWVhciwgIi50aWYiKQoKI091dHB1dCB0aGUgcGF0aApvdXRwdXRTdHJpbmcoInNpbXVsYXRlZF9sdWxjX3NhdmVfcGF0aCIsIEZpbmFsX2xVTENfcGF0aCkKCiNvdXRwdXQgdGhlIHNpbXVsYXRlZCBtYXAgeWVhciBmb3IgdXNlIGluIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiBkZXRlcm1pbmlzdGljIHRyYW5zaXRpb25zCm91dHB1dFN0cmluZygiU2ltdWxhdGVkX0xVTENfeWVhciIsIFNpbXVsYXRlZF9sdWxjX3llYXIpCg==" .no {{
                            @alias = Simulated LULC map base path
                            NumberString receiveFilePathForSimulatedLulcMaps 1;

                            @alias = Current time
                            NumberValue timeStep 1;

                            @alias = Model step length
                            NumberValue stepLength 2;
                        }};

                        @viewer.resultingLanscape = yes
                        allocateTransitions1203 := AllocateTransitions {
                            lanscape = updatedLulcMap,
                            probabilities = createCubeOfProbabilityMaps2989,
                            transitionMatrix = transitionRatesTable,
                            percentOfTransitionsByExpansion = expansionTable,
                            patchExpansionParameters = patchRelatedParams,
                            patchGenerationParameters = patchRelatedParams,
                            printTransitionInfo = .yes
                        };

                        @viewer.string = yes
                        simulatedLulcSavePath := ExtractStructString createSimulatedLulcSavePath $"(simulated_lulc_save_path)";

                        // Simulated LULC map saved at every time step. Receives time info from control 
                        // operator and adds a suffix to the file path. 
                        @alias = Save simulated LULC
                        SaveMap {
                            map = allocateTransitions1203,
                            filename = simulatedLulcSavePath,
                            suffixDigits = 0,
                            step = 0,
                            useCompression = .yes,
                            workdir = workdir,
                            ignoreCostlySparseCategories = .yes
                        };

                        simulatedLulcYear := ExtractStructString createSimulatedLulcSavePath $"(Simulated_LULC_year)";
                    }};

                    @alias = Implement deterministic transitions
                    _ := Group .none {{
                        @collapsed = no
                        deterministicTransitions := CalculateRExpression "IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyMgRGluYW1pY2FfZGV0ZXJtaW5pc3RpY190cmFuczogSW1wbGVtZW50IGRldGVybWluaXN0aWMgdHJhbnNpdGlvbnMgCiMjIGZvbGxvd2luZyBzdGF0aXN0aWNhbCB0cmFuc2l0aW9uIHBvdGVudGlhbCBkdXJpbmcgZHVyaW5nIHNpbXVsYXRpb24gc3RlcAojIyBEYXRlOiAwMy0wNS0yMDIzCiMjIEF1dGhvcjogQmVuIEJsYWNrCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCgojIyMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQojIyMgQS0gUHJlcGFyYXRpb24KIyMjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCiNyZWNlaXZlIHdvcmtpbmcgZGlyZWN0b3J5CndwYXRoIDwtIHMyCiN3cGF0aCA8LSBnZXR3ZCgpCnNldHdkKHdwYXRoKQoKI1ZlY3RvciBwYWNrYWdlcyBmb3IgbG9hZGluZwpwYWNrczwtYygiZGF0YS50YWJsZSIsICJyYXN0ZXIiLCAidGlkeXZlcnNlIiwic3RyaW5nciIsICJyZWFkciIsICJ4bHN4IiwKICAgICAgICAgIkRpbmFtaWNhIiwgInJlYWR4bCIpCgpuZXcucGFja3M8LXBhY2tzWyEocGFja3MgJWluJSBpbnN0YWxsZWQucGFja2FnZXMoKVssIlBhY2thZ2UiXSldCmlmKGxlbmd0aChuZXcucGFja3MpKSBpbnN0YWxsLnBhY2thZ2VzKG5ldy5wYWNrcykKCiMgTG9hZCByZXF1aXJlZCBwYWNrYWdlcwppbnZpc2libGUobGFwcGx5KHBhY2tzLCByZXF1aXJlLCBjaGFyYWN0ZXIub25seSA9IFRSVUUpKQoKI3NlbmQgbW9kZWwgdG9vbCB2YXJzIHRvIGdsb2JhbCBlbnZpcm9ubWVudApsaXN0MmVudihyZWFkUkRTKCJUb29scy9Nb2RlbF90b29sX3ZhcnMucmRzIiksIC5HbG9iYWxFbnYpCgojIyMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQojIyMgQi0gUmVjZWl2ZSBpbmZvcm1hdGlvbiBmcm9tIERpbmFtaWNhCiMjIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CgojdmFsdWVzIGZvciB0ZXN0aW5nIHB1cnBvc2VzCiMgU2ltdWxhdGVkX2x1bGNfeWVhciA8LSAiMjAyNSIKIyBTaW11bGF0aW9uX251bSA8LSAiMSIKIyBGaWxlX3BhdGhfc2ltdWxhdGVkX0xVTENfbWFwcyA8LSAiUmVzdWx0cy9EaW5hbWljYV9zaW11bGF0ZWRfTFVMQy9CQVUvdjEvc2ltdWxhdGVkX0xVTENfc2NlbmFyaW9fQkFVX3NpbUlEX3YxX3llYXJfMjAyNS50aWYiCgojUmVjZWl2ZSBjdXJyZW50IHNpbXVsYXRpb24gdGltZQpTaW11bGF0ZWRfbHVsY195ZWFyIDwtIHMzCgojc2ltdWxhdGlvbiBudW1iZXIgYmVpbmcgcGVyZm9ybWVkClNpbXVsYXRpb25fbnVtIDwtIHYyCgojbG9hZCB0YWJsZSBvZiBzaW11bGF0aW9ucwpDb250cm9sX3RhYmxlX3BhdGggPC0gczQKU2ltdWxhdGlvbl90YWJsZSA8LSByZWFkLmNzdihDb250cm9sX3RhYmxlX3BhdGgpW1NpbXVsYXRpb25fbnVtLF0KCiNWZWN0b3IgbmFtZSBvZiBTY2VuYXJpbyB0byBiZSB0ZXN0ZWQgYXMgc3RyaW5nIG9yIG51bWVyaWMgKGkuZS4gIkJBVSIgZXRjLikgClNjZW5hcmlvX0lEIDwtIFNpbXVsYXRpb25fdGFibGUkU2NlbmFyaW9fSUQuc3RyaW5nCgojVmVjdG9yIElEIGZvciB0aGlzIHJ1biBvZiB0aGUgc2NlbmFyaW8gKGUuZyBWMSkKU2ltdWxhdGlvbl9JRCA8LSBTaW11bGF0aW9uX3RhYmxlJFNpbXVsYXRpb25fSUQuc3RyaW5nCgojRGVmaW5lIG1vZGVsX21vZGU6IENhbGlicmF0aW9uIG9yIFNpbXVsYXRpb24KTW9kZWxfbW9kZSA8LSBTaW11bGF0aW9uX3RhYmxlJE1vZGVsX21vZGUuc3RyaW5nCgojUmVjZWl2ZSBmaWxlIHBhdGggZm9yIGxvYWRpbmcgc2ltdWxhdGVkIExVTEMgbWFwcwpGaWxlX3BhdGhfc2ltdWxhdGVkX0xVTENfbWFwcyA8LSBzMQoKI3RlbXAgcGF0aCBmb3IgdGVzdGluZwojVXBkYXRlZF9MVUxDX3BhdGggPC0gc3RyX3JlcGxhY2UoRmlsZV9wYXRoX3NpbXVsYXRlZF9MVUxDX21hcHMsICIudGlmIiwgIl9EVHVwZGF0ZS50aWYiKQoKI2lmIHRoZSBtb2RlbCBpcyBpbiBzaW11bGF0aW9uIG1vZGUgYW5kIHRoZSB2YWx1ZSBpbiB0aGUgZGV0ZXJtaW5pc3RpYyAKI3RyYW5zaXRpb25zIGNvbHVtbiBvZiB0aGUgY29udHJvbCB0YWJsZSBpcyBub3QgIk4iIHRoZW4gdXBkYXRlIHRoZSBjdXJyZW50IAojc2ltdWxhdGVkIExVTEMgbWFwIHdpdGggdGhlIGRldGVybWluaXN0aWMgdHJhbnNpdGlvbnMKaWYoZ3JlcGwoInNpbXVsYXRpb24iLCBNb2RlbF9tb2RlLCBpZ25vcmUuY2FzZSA9IFRSVUUpICYKICAgIGdyZXBsKCJZIiwgU2ltdWxhdGlvbl90YWJsZSREZXRlcm1pbmlzdGljX3RyYW5zLnN0cmluZywgaWdub3JlLmNhc2UgPSBUUlVFKSl7CiAgCiAgICAjTG9hZCBzaW11bGF0ZWQgTFVMQyBtYXAgZm9yIHRpbWUgc3RlcAogICAgQ3VycmVudF9sdWxjIDwtIHJhc3RlcihGaWxlX3BhdGhfc2ltdWxhdGVkX0xVTENfbWFwcykKICAgIAogICAgI2NvbnZlcnQgcmFzdGVyIHRvIGRhdGFmcmFtZQogICAgTFVMQ19kYXQgPC0gcmFzdGVyOjphcy5kYXRhLmZyYW1lKEN1cnJlbnRfbHVsYykKICAgIAogICAgI2dldCBuYW1lIG9mIGZpcnN0IGNvbHVtbgogICAgVmFsdWVfY29sIDwtIGNvbG5hbWVzKExVTENfZGF0KVsxXQoKICAgICNhZGQgSUQgY29sdW1uIHRvIGRhdGFzZXQKICAgIExVTENfZGF0JElEIDwtIHNlcS5pbnQobnJvdyhMVUxDX2RhdCkpCgogICAgI0dldCBYWSBjb29yZGluYXRlcyBvZiBjZWxscwogICAgeHlfY29vcmRpbmF0ZXMgPC0gY29vcmRpbmF0ZXMoQ3VycmVudF9sdWxjKSAKCiAgICAjY2JpbmQgWFkgY29vcmRpbmF0ZXMgdG8gZGF0YWZyYW1lIGFuZCBzZXBlcmF0ZSByb3dzIHdoZXJlIGFsbCB2YWx1ZXMgPSBOQQogICAgTFVMQ19kYXQgPC0gY2JpbmQoTFVMQ19kYXQsIHh5X2Nvb3JkaW5hdGVzKQogIAogICAgI2xvYWQgc2NlbmFyaW8gc3BlY2lmaWMgZ2xhY2llciBpbmRleAogICAgR2xhY2llcl9pbmRleCA8LSByZWFkUkRTKGZpbGUgPSBsaXN0LmZpbGVzKCJEYXRhL0dsYWNpYWxfY2hhbmdlL1NjZW5hcmlvX2luZGljZXMiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsbC5uYW1lcyA9IFRSVUUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuID0gU2NlbmFyaW9fSUQpKVssYygiSURfbG9jIiwgcGFzdGUoU2ltdWxhdGVkX2x1bGNfeWVhcikpXQoKICAgICNzZXBlcmF0ZSB2ZWN0b3Igb2YgY2VsbCBJRHMgZm9yIGdsYWNpZXIgYW5kIG5vbi1nbGFjZXIgY2VsbHMKICAgIE5vbl9nbGFjaWVyX0lEcyA8LSBHbGFjaWVyX2luZGV4W0dsYWNpZXJfaW5kZXhbW3Bhc3RlKFNpbXVsYXRlZF9sdWxjX3llYXIpXV09PTAsICJJRF9sb2MiXQogICAgR2xhY2llcl9JRHMgPC0gR2xhY2llcl9pbmRleFtHbGFjaWVyX2luZGV4W1twYXN0ZShTaW11bGF0ZWRfbHVsY195ZWFyKV1dPT0xLCAiSURfbG9jIl0gCiAgICAKICAgICNyZXBsYWNlIHRoZSAxJ3MgYW5kIDAncyB3aXRoIHRoZSBjb3JyZWN0IExVTEMgCiAgICBMVUxDX2RhdFtMVUxDX2RhdCRJRCAlaW4lIE5vbl9nbGFjaWVyX0lEcywgVmFsdWVfY29sXSA8LSAxMQogICAgTFVMQ19kYXRbTFVMQ19kYXQkSUQgJWluJSBHbGFjaWVyX0lEcywgVmFsdWVfY29sXSA8LSAxOQogICAgICAKICAgICNjb252ZXJ0IGJhY2sgdG8gcmFzdGVyCiAgICBVcGRhdGVkX3Jhc3RlciA8LSByYXN0ZXJGcm9tWFlaKExVTENfZGF0WyxjKCJ4IiwgInkiLCBWYWx1ZV9jb2wpXSkgCiAgCiAgICAjc2F2ZSB1cGRhdGVkIExVTEMgcmFzdGVyCiAgICB3cml0ZVJhc3RlcihVcGRhdGVkX3Jhc3RlciwgRmlsZV9wYXRoX3NpbXVsYXRlZF9MVUxDX21hcHMsIG92ZXJ3cml0ZSA9IFRSVUUsIGRhdGF0eXBlID0iSU5UMVUiKQogIH0KCiNzZW5kIGZpbGUgcGF0aCB0byBkaW5hbWljYQpvdXRwdXRTdHJpbmcoInVwZGF0ZWRfbHVsY19tYXBfcGF0aCIsIEZpbGVfcGF0aF9zaW11bGF0ZWRfTFVMQ19tYXBzKQ==" .no {{
                            @alias = Simulated LULC save path
                            NumberString simulatedLulcSavePath 1;

                            @alias = Working directory
                            NumberString specifyWorkingDirectoryFromR 2;

                            @alias = Simulated LULC year
                            NumberString simulatedLulcYear 3;

                            @alias = File path for control table
                            NumberString specifyControlTableFilePathTableConsistingOfColumnsSpecifyingTheSimulationsToBePerformedEGScenariosLengthVersionsEtc 4;

                            @alias = Simulation number
                            NumberValue simulationNumber 2;
                        }};

                        updatedLulcMapPath := ExtractStructString deterministicTransitions $"(updated_lulc_map_path)";

                        //
                        // ===
                        // Load simulated LULC map that has had deterministic transition incorporated 
                        loadUpdatedLulcMap := LoadCategoricalMap {
                            filename = updatedLulcMapPath,
                            nullValue = .none,
                            storageMode = .default,
                            suffixDigits = 0,
                            step = step0,
                            workdir = workdir
                        };
                    }};
                }};

                //
                // ===
                // If simulating during calibration period validate outputs 
                @collapsed = no
                @alias = Calibration period validation
                _ := Group scenarioTimeStepIteration {{
                    @collapsed = no
                    calculateRexpression2508 := CalculateRExpression "IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyMgRGluYW1pY2FfdXNlX3ZhbGlkYXRpb246IERldHJtaW5lIGNvbmRpdGlvbiBmb3IgJ2lmIGVsc2UnIGZ1bmN0aW9uIHRvIHBlcmZvcm0KIyMgdmFsaWRhdGlvbiBvbiBzaW11bGF0aW9uIHJlc3VsdHMgIAojIyBEYXRlOiAwMS0xMC0yMDIyCiMjIEF1dGhvcjogQmVuIEJsYWNrCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCgojIyMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQojIyMgQS0gUmVjZWl2ZSBpbmZvIGZyb20gRGluYW1pY2EKIyMjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCiNyZWNlaXZlIHdvcmtpbmcgZGlyZWN0b3J5CndwYXRoIDwtIHM0CnNldHdkKHdwYXRoKQoKI3JlY2VpdmUgdGFibGUgb2Ygc2ltdWxhdGlvbiB0aW1lIHN0ZXBzClNpbXVsYXRpb25fdGltZV9zdGVwcyA8LSB0MQojU2ltdWx0YXRpb25fdGltZV9zdGVwcyA8LSBhcy5kYXRhLmZyYW1lKG1vZGVsX3RpbWVfc3RlcHMpCgojcmVjZWl2ZSBmaWxlIHBhdGggb2Ygc2ltdWxhdGVkIExVTEMgbWFwcyBmb3IgdGhpcyBzaW11bGF0aW9uClNpbV9MVUxDX3BhdGhfZ2VuIDwtIHMxCgojcmVjZWl2ZSBzdHJpbmcgb2YgTW9kZWwgbW9kZQpNb2RlbF9tb2RlIDwtIHMyCiNNb2RlbF9tb2RlIDwtICJjYWxpYnJhdGlvbiIKCiNyZWNlaXZlIHNpbXVsYXRpb24gSUQKU2ltX0lEIDwtIHMzCgojIyMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQojIyMgQi0gRGV0ZXJtaW5lIGlmIHZhbGlkYXRpb24gaXMgcmVxdWlyZWQKIyMjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCiNJZiBtb2RlbCBtb2RlIGlzIHNpbXVsYXRpb24gdGhlbiByZXR1cm4gJzAnIGFzIHZhbGlkYXRpb24gaXMgbm90IHJlcXVpcmVkCiNlbHNlIGlmIGNhbGlicmF0aW9uICx0aGVuIHZhbGlkYXRpb24gaXMgcmVxdWlyZWQgc28gcmV0dXJuICcxJyAKI2FuZCBnZW5lcmF0ZSBmaWxlIHBhdGhzIGZvciBzYXZpbmcgdmFsaWRhdGlvbiByZXN1bHRzCgojdmVjdG9yIGZvbGRlciBwYXRoIGZvciB2YWxpZGF0aW9uIHJlc3VsdHMKVmFsX3Jlc19mb2xkZXIgPC0gcGFzdGUwKHdwYXRoLCAiL1Jlc3VsdHMvVmFsaWRhdGlvbi8iLCBTaW1fSUQpClZhbF9yZXNfcGF0aCA8LSBwYXN0ZTAoVmFsX3Jlc19mb2xkZXIsICIvIiwgcGFzdGUoIlNpbXVsYXRpb24iLCBTaW1fSUQsICJmcm9tIiwgU2ltdWxhdGlvbl90aW1lX3N0ZXBzWzEsICJLZXlzIl0sICJ0byIsIFNpbXVsYXRpb25fdGltZV9zdGVwc1tucm93KFNpbXVsYXRpb25fdGltZV9zdGVwcyksICJWYWx1ZXMiXSwgc2VwID0gIl8iKSkKCmlmKGdyZXBsKCJzaW11bGF0aW9uIiwgTW9kZWxfbW9kZSwgaWdub3JlLmNhc2UgPSBUUlVFKSl7CnZhbGlkYXRpb25fY29uZGl0aW9uIDwtIDAKVmFsaWRhdGlvbl9tYXBfcGF0aCA8LSAiTkEiClZhbGlkYXRpb25fcmVzdWx0X3BhdGggPC0gIk5BIgp9IGVsc2UgIHsKdmFsaWRhdGlvbl9jb25kaXRpb24gPC0gMQoKI3ZlY3RvciBmaWxlIHBhdGhzIGZvciByZXN1bHRzCmRpci5jcmVhdGUoVmFsX3Jlc19mb2xkZXIsIHJlY3Vyc2l2ZSA9IFRSVUUpCgojYWRqdXN0IHRvIGZpbGUgcGF0aApWYWxpZGF0aW9uX21hcF9wYXRoIDwtIHBhc3RlMChWYWxfcmVzX3BhdGgsICJfbWFwLnRpZiIpClZhbGlkYXRpb25fcmVzdWx0X3BhdGggPC0gcGFzdGUwKFZhbF9yZXNfcGF0aCwgIl9zaW1pbGFyaXR5X3ZhbHVlLmNzdiIpIAp9IAoKI291dHB1dCB2YWxpZGF0aW9uIGNvbmRpdGlvbgpvdXRwdXREb3VibGUoIlVzZV92YWxpZGF0aW9uIiwgdmFsaWRhdGlvbl9jb25kaXRpb24pIAoKI091dHB1dCByZXN1bHQgcGF0aHMKb3V0cHV0U3RyaW5nKCJWYWxfbWFwX3BhdGgiLCBWYWxpZGF0aW9uX21hcF9wYXRoKQpvdXRwdXRTdHJpbmcoIlZhbF9yZXN1bHRfcGF0aCIsIFZhbGlkYXRpb25fcmVzdWx0X3BhdGgpCgojIyMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQojIyMgQy0gT2JzZXJ2ZWQgTFVMQwojIyMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKI2dhdGhlciBmaWxlIHBhdGggZm9yIG9ic2VydmVkIExVTEMgeWVhciB0aGF0IGlzIGNsb3Nlc3QgdG8gdGhhdCBvZiB0aGUgZmluYWwgc2ltdWxhdGlvbiB5ZWFyCk9ic19MVUxDX3BhdGhzIDwtIGxpc3QuZmlsZXMoIkRhdGEvSGlzdG9yaWNfTFVMQyIsIGZ1bGwubmFtZXMgPSBUUlVFLCBwYXR0ZXJuID0gIi5ncmQiKQoKI2V4dHJhY3QgbnVtZXJpY3MKT2JzX0xVTENfeWVhcnMgPC0gYXMubnVtZXJpYyhnc3ViKCIuKj8oWzAtOV0rKS4qIiwgIlxcMSIsIE9ic19MVUxDX3BhdGhzKSkKCiNpZGVudGlmeSBjbG9zZXN0IExVTEMgeWVhcgpkZXNpcmVkX2x1bGNfeWVhciA8LSB3aGljaC5taW4oYWJzKE9ic19MVUxDX3llYXJzIC0gU2ltdWxhdGlvbl90aW1lX3N0ZXBzW25yb3coU2ltdWxhdGlvbl90aW1lX3N0ZXBzKSwgIktleXMiXSkpCgojc3Vic2V0IHRvIGNvcnJlY3QgTFVMQyBwYXRoCkZpbmFsX0xVTENfcGF0aCA8LSBPYnNfTFVMQ19wYXRoc1tkZXNpcmVkX2x1bGNfeWVhcl0KCiNvdXRwdXQgZmlsZSBwYXRoIGZvciBvYnNlcnZlZCBtYXAgZm9yIGZpbmFsIExVTEMgeWVhciAKb3V0cHV0U3RyaW5nKCJPYnNfTFVMQ19wYXRoIiwgRmluYWxfTFVMQ19wYXRoKQoKIyMjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KIyMjIEQtIFNpbXVsYXRlZCBMVUxDCiMjIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CgojYWx0ZXIgZmlsZSBwYXRoIGZvciBzaW11bGF0ZWQgTFVMQyBtYXAgZm9yIGZpbmFsIHNpbXVsYXRpb24geWVhcgpTaW1fZmluYWxfTFVMQ19wYXRoIDwtIHBhc3RlMChTaW1fTFVMQ19wYXRoX2dlbiwgU2ltdWxhdGlvbl90aW1lX3N0ZXBzW25yb3coU2ltdWxhdGlvbl90aW1lX3N0ZXBzKSwgIlZhbHVlcyJdLCAiLnRpZiIpCgojb3V0cHV0IGZpbGUgcGF0aCBmb3Igc2ltdWxhdGVkIG1hcCBmb3IgZmluYWwgTFVMQyB5ZWFyCm91dHB1dFN0cmluZygiU2ltX0xVTENfcGF0aCIsIFNpbV9maW5hbF9MVUxDX3BhdGgpCgo=" .no {{
                        @alias = Send file path for simulated LULC map
                        NumberString receiveFilePathForSimulatedLulcMaps 1;

                        @alias = Send model mode
                        NumberString receiveModelMode 2;

                        @alias = Send simulation ID
                        NumberString receiveSimulationId 3;

                        @alias = working directory
                        NumberString specifyWorkingDirectoryFromR 4;

                        @alias = Send table of simulation time steps
                        NumberTable receiveTableOfTimeStepsDefiningLengthOfSimulation 1;
                    }};

                    receiveValidationMapSavePath := ExtractStructString calculateRexpression2508 $"(Val_map_path)";

                    @viewer.string = yes
                    receiveFilePathOfObservedLulcMapForLastYearOfSimulation := ExtractStructString calculateRexpression2508 $"(Obs_LULC_path)";

                    // returning 0 does not initiate validation, returning 1 does 
                    @viewer.number = yes
                    ifThenCondition := ExtractStructNumber calculateRexpression2508 $"(Use_validation)";

                    receiveFilePathOfSimulatedLulcMap := ExtractStructString calculateRexpression2508 $"(Sim_LULC_path)";

                    receiveValidationResultSavePath := ExtractStructString calculateRexpression2508 $"(Val_result_path)";

                    _ := IfThen ifThenCondition .none {{
                        loadSimulatedLulcMap := LoadCategoricalMap {
                            filename = receiveFilePathOfSimulatedLulcMap,
                            nullValue = .none,
                            storageMode = .default,
                            suffixDigits = 0,
                            step = step,
                            workdir = workdir
                        };

                        loadObservedLulcMapForFinalYearOfSimulation := LoadCategoricalMap {
                            filename = receiveFilePathOfObservedLulcMapForLastYearOfSimulation,
                            nullValue = .none,
                            storageMode = .default,
                            suffixDigits = 0,
                            step = step,
                            workdir = workdir
                        };

                        @alias = Load Initial Lulc Map
                        loadInitialLulcMap0 := LoadCategoricalMap {
                            filename = receiveInitialLulcFilePath,
                            nullValue = .none,
                            storageMode = .default,
                            suffixDigits = 0,
                            step = step,
                            workdir = workdir
                        };

                        @viewer.similarity = yes
                        @viewer.similarityMap = yes
                        similarityMap similarity := CalcSimilarityOfDifferences {
                            initialMap = loadInitialLulcMap0,
                            observedMap = loadObservedLulcMapForFinalYearOfSimulation,
                            simulatedMap = loadSimulatedLulcMap,
                            useExponentialDecay = .yes,
                            windowSize = 11,
                            printSimilarities = .yes,
                            exponentialDecayDivisor = 2
                        };

                        SaveTextFile {
                            text = similarity,
                            filename = receiveValidationResultSavePath,
                            suffixDigits = 2,
                            step = step,
                            workdir = workdir
                        };

                        SaveMap {
                            map = similarityMap,
                            filename = receiveValidationMapSavePath,
                            suffixDigits = 2,
                            step = step,
                            useCompression = .yes,
                            workdir = workdir,
                            ignoreCostlySparseCategories = .yes
                        };
                    }};
                }};
            }};

            @alias = Update control table to reflect simulation complete
            _ := Group .none {{
                @collapsed = no
                _ := CalculateRExpression "IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKIyMgRGluYW1pY2FfdXBkYXRlX2NvbnRyb2xfdGFibGU6IFVwZGF0ZSB0aGUgY29udHJvbCB0YWJsZSBhZnRlciBjb21wbGV0aW9uIG9mIHNpbXVsYXRpb24gCiMjIERhdGU6IDAxLTEwLTIwMjIKIyMgQXV0aG9yOiBCZW4gQmxhY2sKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKCmxpYnJhcnkocmVhZHIpCgojcmVjZWl2ZSBmaWxlIHBhdGggZm9yIGNvbnRyb2wgdGFibGUgCkNvbnRyb2xfdGFibGVfcGF0aCA8LSBzMQoKI3JlY2VpdmUgQm9vbGVhbiB2YWx1ZSBvZiB3aGV0aGVyIHNpbXVsYXRpb24gd2FzIGNvbXBsZXRlZCBzdWNjZXNzZnVsbHkKU3VjY2VzcyA8LSBzMgpjYXQoU3VjY2VzcykKCiNyZWNlaXZlIHJvdyBudW1iZXIgb2YgY3VycmVudCBzaW11bGF0aW9uClNpbXVsYXRpb25fbnVtIDwtIHYxCiNTaW11bGF0aW9uX251bSA8LSAxCgojbG9hZCBjb250cm9sIGFuZCBzdWJzZXQgdG8gc2ltdWxhdGlvbiBudW1iZXIKQ29udHJvbF90YWJsZSA8LSByZWFkLmNzdihDb250cm9sX3RhYmxlX3BhdGgpCgojdXBkYXRlIHZhbHVlIGluIGNvbXBsZXRlZCBjb2x1bW4gZm9yIGN1cnJlbnQgc2ltdWxhdGlvbgppZihncmVwbCgiVFJVRSIsIFN1Y2Nlc3MsIGlnbm9yZS5jYXNlID0gVFJVRSkpewpDb250cm9sX3RhYmxlW0NvbnRyb2xfdGFibGUkU2ltdWxhdGlvbl9udW0uID09IFNpbXVsYXRpb25fbnVtLCJDb21wbGV0ZWQuc3RyaW5nIl0gPC0gIlkiCmNhdCgiU2ltdWxhdGlvbiB3YXMgY29tcGxldGVkIHN1Y2Nlc3NmdWxseSIpCn1lbHNlewpDb250cm9sX3RhYmxlW0NvbnRyb2xfdGFibGUkU2ltdWxhdGlvbl9udW0uID09IFNpbXVsYXRpb25fbnVtLCJDb21wbGV0ZWQuc3RyaW5nIl0gPC0gIkVSUk9SIgkKY2F0KCJTaW11bGF0aW9uIGVuY291bnRlcmVkIGFuIGVycm9yIikKCX0KCiNzYXZlIHRhYmxlCnJlYWRyOjp3cml0ZV9jc3YoQ29udHJvbF90YWJsZSwgQ29udHJvbF90YWJsZV9wYXRoKQo=" .no {{
                    @alias = File path for control table
                    NumberString specifyControlTableFilePathTableConsistingOfColumnsSpecifyingTheSimulationsToBePerformedEGScenariosLengthVersionsEtc 1;

                    @alias = Completion boolean
                    NumberString skipOnError1399 2;

                    @alias = Simulation number
                    NumberValue simulationNumber 1;
                }};
            }};
        }};
    }};
}};