---
title: "Mermaid Diagram with Tooltips"
format:
  html:
    theme:
      light: default
      dark: darkly
    css: styles.scss
---

## Flowchart with Interactive Tooltips

```{mermaid}
%%| label: fig-lulc-workflow
%%| fig-cap: "LULC Modeling Workflow"

flowchart TD
    PredData[(Predictors)]
    RefRast[Reference raster]
    Regions[/Regions raster/]
    
    PredData --> TransProc[Transform Processing]
    RefRast --> TransProc
    Regions --> TransProc
    
    TransProc --> LULC[LULC Active Classes in Script]
    LULC --> NeighPrep[Neighbourhood Prep]
    NeighPrep --> FocalLayers[Focal Layers Needed For Simulation]
    
    FocalLayers --> FeatureSelect[Feature Selection]
    FeatureSelect --> FilteredData[Filtered Datasets]
    FilteredData --> TransModel[Transition Modelling SLR]
    
    LULC --> SpatialInt[Spatial Interactions Prep]
    SpatialInt --> SpecialMasks[Special Intervention Masks .tif]
    
    TransModel --> ModelLearn[Model Learning]
    ModelLearn --> TransModels[Trans Models SLR]
    TransModels --> ModelEval[Trans Model Evaluation]
    
    ModelEval --> StatInt[Statistical Interventions Table]
    StatInt --> PredControl[Predictor Control Table]
    StatInt --> Allocation[Allocation: 1. Stack Prob Maps 2. Patcher 3. Expander]
    
    TransModels --> Prediction[Prediction Potential Maps .tif]
    Allocation --> PredLULC[Predicted LULC Map]
    
    SimParams[Simulation Parameters Prep] --> Allocation
    LULC --> DetTrans[Deterministic Trans Prep]
    DetTrans --> SimErrTable[Simulation Error Table]
    
    TransProc --> TransIdent[Transition Identification]
    TransIdent --> CrossVal[Cross-validation RDS]
    CrossVal --> FeatureSelect
    
    CloudCover[Evaluate Parameters] --> SimParams
    Prediction --> Allocation
    PredLULC --> FinalOutput[Final LULC Prediction Maps]
```

```{=html}
<style>
.tooltip {
  position: absolute;
  background: rgba(0, 0, 0, 0.9);
  color: white;
  padding: 8px 12px;
  border-radius: 6px;
  font-size: 14px;
  max-width: 300px;
  z-index: 1000;
  pointer-events: none;
  opacity: 0;
  transition: opacity 0.3s ease;
  box-shadow: 0 4px 12px rgba(0,0,0,0.3);
}
.tooltip.show {
  opacity: 1;
}
</style>

<div class="tooltip" id="tooltip"></div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const tooltipData = {
    "Predictors - Single ID": "Input predictor variables with unique identifiers for spatial modeling and analysis.",
    "Reference Data .tif": "Reference land use/land cover data in GeoTIFF format used for model training and validation.",
    "Regions .tif": "Spatial regions or study area boundaries defining the geographic extent for analysis.",
    "Transform Processing": "Data preprocessing step that transforms and standardizes input data for modeling compatibility.",
    "LULC Active Classes in Script": "Definition and configuration of active land use/land cover classes used in the modeling process.",
    "Neighbourhood Prep": "Preparation of neighborhood analysis parameters for spatial context evaluation.",
    "Focal Layers Needed For Simulation": "Generation of focal/neighborhood layers required for spatial simulation modeling.",
    "Feature Selection": "Statistical process to identify the most relevant predictor variables for model performance.",
    "Filtered Datasets": "Processed datasets after feature selection, containing only relevant variables for modeling.",
    "Transition Modelling SLR": "Stepwise logistic regression modeling to understand land use transition probabilities.",
    "Spatial Interactions Prep": "Preparation of spatial interaction parameters and constraints for the modeling process.",
    "Special Intervention Masks .tif": "Spatial masks defining areas with special constraints or intervention policies.",
    "Model Learning": "Machine learning phase where transition models are trained on historical data patterns.",
    "Trans Models SLR": "Trained transition models using stepwise logistic regression for each land use change.",
    "Trans Model Evaluation": "Assessment of model performance using validation metrics and accuracy measures.",
    "Statistical Interventions Table": "Table defining statistical rules and interventions for land use transitions.",
    "Predictor Control Table": "Control parameters defining how predictor variables influence transition probabilities.",
    "Allocation: 1. Stack Prob Maps 2. Patcher 3. Expander": "Three-step allocation process: stacking probability maps, patching similar areas, and expanding land use patches.",
    "Prediction Potential Maps .tif": "Probability maps showing the potential for land use transitions across the study area.",
    "Predicted LULC Map": "Final predicted land use/land cover map generated through the allocation process.",
    "Simulation Parameters Prep": "Configuration of simulation parameters including time steps, constraints, and model settings.",
    "Deterministic Trans Prep": "Preparation of deterministic (rule-based) transitions that override probabilistic modeling.",
    "Simulation Error Table": "Table documenting potential errors and uncertainties in the simulation process.",
    "Transition Identification": "Process to identify and classify different types of land use transitions from historical data.",
    "Cross-validation RDS": "Cross-validation results saved in R data format for model performance assessment.",
    "Evaluate Parameters": "Systematic evaluation and optimization of model parameters for best performance.",
    "Final LULC Prediction Maps": "Final output maps showing predicted future land use/land cover scenarios."
  };

  function getNodeText(node) {
    // Try different selectors for text content in Quarto's Mermaid implementation
    const textElement = node.querySelector('text') || 
                       node.querySelector('.label') || 
                       node.querySelector('span') ||
                       node.querySelector('foreignObject div');
    if (textElement) {
      return textElement.textContent.trim();
    }
    return node.textContent.trim();
  }

  function setupTooltips() {
    const tooltip = document.getElementById('tooltip');
    
    // Quarto typically renders Mermaid diagrams in figure elements
    const mermaidContainers = document.querySelectorAll('figure[id*="fig-lulc-workflow"], .cell-output-display, div[id*="fig-lulc-workflow"]');
    
    mermaidContainers.forEach(container => {
      // Look for SVG elements within the container
      const svgElement = container.querySelector('svg');
      if (!svgElement) return;
      
      // Try multiple selectors for nodes in Quarto's Mermaid implementation
      const nodes = svgElement.querySelectorAll('.node, .flowchart-node, g[class*="node"], g[id*="flowchart"]');
      
      console.log(`Found ${nodes.length} nodes in Quarto Mermaid diagram`);
      
      nodes.forEach((node, index) => {
        const nodeText = getNodeText(node);
        console.log(`Node ${index}: "${nodeText}"`);
        
        if (tooltipData[nodeText]) {
          node.style.cursor = "pointer";
          
          // Add hover effects
          node.addEventListener("mouseenter", (e) => {
            tooltip.textContent = tooltipData[nodeText];
            tooltip.classList.add("show");
            // Position tooltip
            const rect = node.getBoundingClientRect();
            tooltip.style.left = (rect.left + rect.width / 2 - tooltip.offsetWidth / 2) + "px";
            tooltip.style.top = (rect.top - tooltip.offsetHeight - 10) + "px";
          });
          
          node.addEventListener("mouseleave", () => {
            tooltip.classList.remove("show");
          });
          
          node.addEventListener("mousemove", (e) => {
            tooltip.style.left = (e.pageX - tooltip.offsetWidth / 2) + "px";
            tooltip.style.top = (e.pageY - tooltip.offsetHeight - 10) + "px";
          });
          
          console.log(`Tooltip bound to: "${nodeText}"`);
        }
      });
    });
  }

  // Setup tooltips with multiple timing strategies for Quarto
  setTimeout(setupTooltips, 500);
  setTimeout(setupTooltips, 1500); // Fallback for slower rendering
  
  // Also use MutationObserver for dynamic content
  const observer = new MutationObserver((mutations) => {
    let shouldSetup = false;
    mutations.forEach((mutation) => {
      if (mutation.type === 'childList') {
        mutation.addedNodes.forEach((node) => {
          if (node.nodeType === 1 && 
              (node.tagName === 'SVG' || 
               node.querySelector('svg') || 
               node.classList?.contains('cell-output-display'))) {
            shouldSetup = true;
          }
        });
      }
    });
    if (shouldSetup) {
      setTimeout(setupTooltips, 200);
    }
  });

  // Observe the entire document for Quarto's dynamic rendering
  observer.observe(document.body, {
    childList: true,
    subtree: true
  });
});
</script>
```

## Usage Notes

- **Hover over any node** in the flowchart above to see detailed tooltips
- The tooltips are positioned dynamically and follow your mouse cursor
- This works with Quarto's native Mermaid rendering without requiring external CDN imports

## Customization

You can easily customize the tooltips by:

1. **Adding more nodes**: Update the `tooltipData` object with new node labels and descriptions
2. **Styling**: Modify the CSS in the `<style>` block
3. **Positioning**: Adjust the tooltip positioning logic in the JavaScript

## Technical Details

This implementation:
- Uses Quarto's built-in Mermaid support (no external CDN needed)
- Works with Quarto's figure labeling system
- Handles Quarto's dynamic content rendering
- Provides fallback timing strategies for reliable tooltip binding



