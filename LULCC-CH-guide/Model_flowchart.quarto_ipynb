{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Simulation Model Documentation\"\n",
        "format: html\n",
        "---\n",
        "\n",
        "\n",
        "::: {#simulation-flowchart}\n",
        "\n",
        "```{mermaid}\n",
        "flowchart TD\n",
        "    PredData[\"Predictors - Single ID\"]\n",
        "    RefData[\"Reference Data .tif\"]\n",
        "    Regions[\"Regions .tif\"]\n",
        "    \n",
        "    PredData --> TransProc[\"Transform Processing\"]\n",
        "    RefData --> TransProc\n",
        "    Regions --> TransProc\n",
        "    \n",
        "    TransProc --> LULC[\"LULC Active Classes in Script\"]\n",
        "    LULC --> NeighPrep[\"Neighbourhood Prep\"]\n",
        "    NeighPrep --> FocalLayers[\"Focal Layers Needed For Simulation\"]\n",
        "    \n",
        "    FocalLayers --> FeatureSelect[\"Feature Selection\"]\n",
        "    FeatureSelect --> FilteredData[\"Filtered Datasets\"]\n",
        "    FilteredData --> TransModel[\"Transition Modelling SLR\"]\n",
        "    \n",
        "    LULC --> SpatialInt[\"Spatial Interactions Prep\"]\n",
        "    SpatialInt --> SpecialMasks[\"Special Intervention Masks .tif\"]\n",
        "    \n",
        "    TransModel --> ModelLearn[\"Model Learning\"]\n",
        "    ModelLearn --> TransModels[\"Trans Models SLR\"]\n",
        "    TransModels --> ModelEval[\"Trans Model Evaluation\"]\n",
        "    \n",
        "    ModelEval --> StatInt[\"Statistical Interventions Table\"]\n",
        "    StatInt --> PredControl[\"Predictor Control Table\"]\n",
        "    StatInt --> Allocation[\"Allocation: 1. Stack Prob Maps 2. Patcher 3. Expander\"]\n",
        "    \n",
        "    TransModels --> Prediction[\"Prediction Potential Maps .tif\"]\n",
        "    Allocation --> PredLULC[\"Predicted LULC Map\"]\n",
        "    \n",
        "    SimParams[\"Simulation Parameters Prep\"] --> Allocation\n",
        "    LULC --> DetTrans[\"Deterministic Trans Prep\"]\n",
        "    DetTrans --> SimErrTable[\"Simulation Error Table\"]\n",
        "    \n",
        "    TransProc --> TransIdent[\"Transition Identification\"]\n",
        "    TransIdent --> CrossVal[\"Cross-validation RDS\"]\n",
        "    CrossVal --> FeatureSelect\n",
        "    \n",
        "    CloudCover[\"Evaluate Parameters\"] --> SimParams\n",
        "    Prediction --> Allocation\n",
        "    PredLULC --> FinalOutput[\"Final LULC Prediction Maps\"]\n",
        "```\n",
        "\n",
        ":::\n",
        "\n",
        "\n",
        "```{html}\n",
        "<style>\n",
        ".tooltip {\n",
        "  position: absolute;\n",
        "  background: rgba(0, 0, 0, 0.85);\n",
        "  color: white;\n",
        "  padding: 8px 12px;\n",
        "  border-radius: 5px;\n",
        "  font-size: 13px;\n",
        "  max-width: 260px;\n",
        "  z-index: 1000;\n",
        "  pointer-events: none;\n",
        "  opacity: 0;\n",
        "  transition: opacity 0.2s ease;\n",
        "  box-shadow: 0 3px 8px rgba(0,0,0,0.3);\n",
        "}\n",
        ".tooltip.show {\n",
        "  opacity: 1;\n",
        "}\n",
        "</style>\n",
        "\n",
        "<script>\n",
        "document.addEventListener(\"DOMContentLoaded\", function () {\n",
        "  const tooltipData = {\n",
        "    \"Predictors - Single ID\": \"Input predictor variables with unique identifiers for spatial analysis\",\n",
        "    \"Reference Data .tif\": \"Reference land use/land cover data in GeoTIFF format for model training\",\n",
        "    \"Regions .tif\": \"Spatial regions or study area boundaries in GeoTIFF format\",\n",
        "    \"Transform Processing\": \"Data preprocessing including coordinate transformation, resampling, and standardization\",\n",
        "    \"LULC Active Classes in Script\": \"Land Use Land Cover classification with active classes defined in processing script\",\n",
        "    \"Neighbourhood Prep\": \"Preparation of neighborhood analysis parameters for spatial context\",\n",
        "    \"Focal Layers Needed For Simulation\": \"Creation of focal/neighborhood layers required for simulation modeling\",\n",
        "    \"Feature Selection\": \"Statistical selection of most relevant predictor variables for modeling\",\n",
        "    \"Filtered Datasets\": \"Cleaned and filtered datasets ready for model training\",\n",
        "    \"Transition Modelling SLR\": \"Transition probability modeling using Statistical Learning Regression methods\",\n",
        "    \"Spatial Interactions Prep\": \"Preparation of spatial interaction parameters and constraints\",\n",
        "    \"Special Intervention Masks .tif\": \"Special intervention or constraint masks in GeoTIFF format\",\n",
        "    \"Model Learning\": \"Machine learning model training phase using prepared datasets\",\n",
        "    \"Trans Models SLR\": \"Trained transition models using Statistical Learning Regression\",\n",
        "    \"Trans Model Evaluation\": \"Model performance evaluation and validation metrics\",\n",
        "    \"Statistical Interventions Table\": \"Statistical intervention parameters table for model constraints\",\n",
        "    \"Predictor Control Table\": \"Predictor control table defining variable importance and constraints\",\n",
        "    \"Allocation: 1. Stack Prob Maps 2. Patcher 3. Expander\": \"Three-step allocation process: 1) Stack probability maps into cube, 2) Patch similar areas, 3) Expand allocated areas\",\n",
        "    \"Prediction Potential Maps .tif\": \"Generated prediction potential maps in GeoTIFF format\",\n",
        "    \"Predicted LULC Map\": \"Final predicted Land Use Land Cover map output\",\n",
        "    \"Simulation Parameters Prep\": \"Simulation parameters preparation including timing and constraints\",\n",
        "    \"Deterministic Trans Prep\": \"Deterministic transition preparation for certain land use changes\",\n",
        "    \"Simulation Error Table\": \"Simulation error tracking and validation table\",\n",
        "    \"Transition Identification\": \"Identification and analysis of land use transition patterns\",\n",
        "    \"Cross-validation RDS\": \"Cross-validation using Random Data Splitting for model validation\",\n",
        "    \"Evaluate Parameters\": \"Parameter evaluation for transition factors and environmental variables\",\n",
        "    \"Final LULC Prediction Maps\": \"Final Land Use Land Cover prediction maps ready for analysis and visualization\"\n",
        "  };\n",
        "\n",
        "  const tooltip = document.createElement(\"div\");\n",
        "  tooltip.className = \"tooltip\";\n",
        "  document.body.appendChild(tooltip);\n",
        "\n",
        "  function attachTooltips() {\n",
        "    const svg = document.querySelector(\"#simulation-flowchart svg\");\n",
        "    if (!svg) return;\n",
        "\n",
        "    const nodes = svg.querySelectorAll(\"g[data-id]\");\n",
        "\n",
        "    nodes.forEach((node) => {\n",
        "      const label = node.textContent.trim();\n",
        "      if (tooltipData[label]) {\n",
        "        node.style.cursor = \"pointer\";\n",
        "\n",
        "        node.addEventListener(\"mouseenter\", () => {\n",
        "          tooltip.innerHTML = tooltipData[label];\n",
        "          tooltip.classList.add(\"show\");\n",
        "        });\n",
        "\n",
        "        node.addEventListener(\"mouseleave\", () => {\n",
        "          tooltip.classList.remove(\"show\");\n",
        "        });\n",
        "\n",
        "        node.addEventListener(\"mousemove\", (e) => {\n",
        "          tooltip.style.left = (e.pageX - tooltip.offsetWidth / 2) + \"px\";\n",
        "          tooltip.style.top = (e.pageY - tooltip.offsetHeight - 10) + \"px\";\n",
        "        });\n",
        "      }\n",
        "    });\n",
        "  }\n",
        "\n",
        "  // Wait for diagram to appear, then attach tooltips\n",
        "  const observer = new MutationObserver(() => {\n",
        "    const svg = document.querySelector(\"#simulation-flowchart svg\");\n",
        "    if (svg) {\n",
        "      attachTooltips();\n",
        "      observer.disconnect();\n",
        "    }\n",
        "  });\n",
        "\n",
        "  observer.observe(document.getElementById(\"simulation-flowchart\"), {\n",
        "    childList: true,\n",
        "    subtree: true,\n",
        "  });\n",
        "});\n",
        "</script>\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "::: {.mermaid #my-diagram}\n",
        "flowchart TD\n",
        "    A[\"Start Node\"] --> B[\"End Node\"]\n",
        ":::\n",
        "\n",
        "~~~html\n",
        "<style>\n",
        ".tooltip {\n",
        "  position: absolute;\n",
        "  background: black;\n",
        "  color: white;\n",
        "  padding: 5px;\n",
        "  border-radius: 4px;\n",
        "  font-size: 12px;\n",
        "  z-index: 1000;\n",
        "  pointer-events: none;\n",
        "  opacity: 0;\n",
        "  transition: opacity 0.2s ease;\n",
        "}\n",
        ".tooltip.show {\n",
        "  opacity: 1;\n",
        "}\n",
        "</style>\n",
        "\n",
        "<script>\n",
        "document.addEventListener(\"DOMContentLoaded\", function () {\n",
        "  const tooltipData = {\n",
        "    \"Start Node\": \"This is the start of the process\",\n",
        "    \"End Node\": \"This is the end of the process\"\n",
        "  };\n",
        "\n",
        "  const tooltip = document.createElement(\"div\");\n",
        "  tooltip.className = \"tooltip\";\n",
        "  document.body.appendChild(tooltip);\n",
        "\n",
        "  const target = document.querySelector(\"#my-diagram svg\");\n",
        "\n",
        "  if (!target) return;\n",
        "\n",
        "  const nodes = target.querySelectorAll(\"g[data-id]\");\n",
        "\n",
        "  nodes.forEach(node => {\n",
        "    const label = node.textContent.trim();\n",
        "    if (tooltipData[label]) {\n",
        "      node.style.cursor = \"pointer\";\n",
        "\n",
        "      node.addEventListener(\"mouseenter\", () => {\n",
        "        tooltip.innerHTML = tooltipData[label];\n",
        "        tooltip.classList.add(\"show\");\n",
        "      });\n",
        "\n",
        "      node.addEventListener(\"mouseleave\", () => {\n",
        "        tooltip.classList.remove(\"show\");\n",
        "      });\n",
        "\n",
        "      node.addEventListener(\"mousemove\", (e) => {\n",
        "        tooltip.style.left = (e.pageX - tooltip.offsetWidth / 2) + \"px\";\n",
        "        tooltip.style.top = (e.pageY - tooltip.offsetHeight - 10) + \"px\";\n",
        "      });\n",
        "    }\n",
        "  });\n",
        "});\n",
        "</script>\n",
        "~~~ "
      ],
      "id": "7f2607b6"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}